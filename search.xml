<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在Linux上安装Jenkins</title>
      <link href="/2019/12/12/jenkins%E5%AE%89%E8%A3%85/"/>
      <url>/2019/12/12/jenkins%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h1><p>自己的服务器为阿里云ubuntu18.04 64位，以下操作全部在此服务器上边,因为使用的阿里云，一定要配置安全组，在配置规则增加之后我们用到的端口号</p><!-- ![进入安全组](https://upload-images.jianshu.io/upload_images/2870014-af7144b38aad99cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) --><img class="lozad" title="This is an example image" data-src="/2019/12/12/jenkins%E5%AE%89%E8%A3%85/blog-1.png"><h1 id="使用docker安装"><a href="#使用docker安装" class="headerlink" title="使用docker安装"></a>使用docker安装</h1><p>既然使用docker安装，首先肯定要安装docker</p><h2 id="1-安装docker"><a href="#1-安装docker" class="headerlink" title="1. 安装docker"></a>1. 安装docker</h2><p>下边链接是安装docker的详细方法方法，这里就不在赘述</p><p>安装docker：<a href="https://yeasy.gitbooks.io/docker_practice/content/install/ubuntu.html" target="_blank" rel="noopener">https://yeasy.gitbooks.io/docker_practice/content/install/ubuntu.html</a></p><h2 id="2-使用docker安装jenkins"><a href="#2-使用docker安装jenkins" class="headerlink" title="2.使用docker安装jenkins"></a>2.使用docker安装jenkins</h2><p>####. 下载 jenkinsci/blueocean 镜像并使用 docker run 命令将其作为Docker中的容器运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  -u root \</span><br><span class="line">  --rm \</span><br><span class="line">  -d \</span><br><span class="line">  -p 8080:8080 \</span><br><span class="line">  -p 50000:50000 \</span><br><span class="line">  -v jenkins-data:/var/jenkins_home \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  jenkinsci/blueocean</span><br></pre></td></tr></table></figure><p>jenkins已经安装好了，没错，使用docker安装就是这么简单，一个命令就已经安装好了，上边命令我们使用的是8080端口</p><h2 id="3-安装后设置"><a href="#3-安装后设置" class="headerlink" title="3. 安装后设置"></a>3. 安装后设置</h2><ol><li>打开浏览器输入你的网址加端口号（例如：<a href="http://127.0.0.1:8080）,会出现下图" target="_blank" rel="noopener">http://127.0.0.1:8080）,会出现下图</a></li></ol><!-- ![打开网址，填写密码](https://upload-images.jianshu.io/upload_images/2870014-bed8403441f68718.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) --><img class="lozad" title="This is an example image" data-src="/2019/12/12/jenkins%E5%AE%89%E8%A3%85/blog-2.png"><p>上图中已经提示需要我们输入密码，并告诉了我们密码的位置，因为我们使用的docker安装，所以这个地址是在docker容器内，有两种方法可以查看这个密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 docker 安装的容器</span></span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><!-- ![安装的容器](https://upload-images.jianshu.io/upload_images/2870014-224ed1a799688a62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) --><img class="lozad" title="This is an example image" data-src="/2019/12/12/jenkins%E5%AE%89%E8%A3%85/blog-3.png"><p>第一种：通过日志查看密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看容器日志</span></span><br><span class="line">docker logs 容器id</span><br><span class="line"><span class="comment"># 在出现信息中，找到下边的信息，能找到我们需要的密码</span></span><br><span class="line"></span><br><span class="line">Jenkins initial setup is required. An admin user has been created and a password generated.</span><br><span class="line">Please use the following password to proceed to installation:</span><br><span class="line"></span><br><span class="line">4xxxxxxxxxxxxxxxxxxxxxxxxxa</span><br><span class="line"></span><br><span class="line">This may also be found at: /var/jenkins_home/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure><p>第二种：进入容器查看密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it 容器id bash</span><br><span class="line">查看密码</span><br><span class="line">cat /var/jenkins_home/secrets/initialAdminPassword</span><br><span class="line">4xxxxxxxxxxxxxxxxxxxxxxxxxa</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出容器</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>复制粘贴密码后点击继续，按提示安装插件,这里选择安装推荐插件</p><!-- ![选择安装推荐插件](https://upload-images.jianshu.io/upload_images/2870014-2218552343e87baf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) --><img class="lozad" title="This is an example image" data-src="/2019/12/12/jenkins%E5%AE%89%E8%A3%85/blog-4.png"><p>然后等待插件安装完毕</p><!-- ![安装插件](https://upload-images.jianshu.io/upload_images/2870014-2ea27dd1036df61a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) --><img class="lozad" title="This is an example image" data-src="/2019/12/12/jenkins%E5%AE%89%E8%A3%85/blog-5.png"><p>安装插件完成后出现下图，选择使用admin账户继续</p><!-- ![创建用户或继续](https://upload-images.jianshu.io/upload_images/2870014-02fc6a174f879a29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) --><img class="lozad" title="This is an example image" data-src="/2019/12/12/jenkins%E5%AE%89%E8%A3%85/blog-6.png"><p>登录jenkins，用户名是：admin，密码和上边解锁jenkins的密码一样</p><!-- ![登录](https://upload-images.jianshu.io/upload_images/2870014-ff86b2102bb617cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) --><img class="lozad" title="This is an example image" data-src="/2019/12/12/jenkins%E5%AE%89%E8%A3%85/blog-7.png"><p>至此，使用docker安装jenkins结束</p><h1 id="通过-apt-安装Jenkins"><a href="#通过-apt-安装Jenkins" class="headerlink" title="通过 apt 安装Jenkins"></a>通过 apt 安装Jenkins</h1><p>因为jenkins是基于java的，所以通过这种方式安装jenkins需要先安装java</p><h2 id="1-安装java"><a href="#1-安装java" class="headerlink" title="1. 安装java"></a>1. 安装java</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">apt install default-jre            </span><br><span class="line">apt install openjdk-11-jre-headless</span><br><span class="line">apt install openjdk-8-jre-headless</span><br></pre></td></tr></table></figure><h2 id="2-安装Jenkins"><a href="#2-安装Jenkins" class="headerlink" title="2. 安装Jenkins"></a>2. 安装Jenkins</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -</span><br><span class="line">sudo sh -c <span class="string">'echo deb http://pkg.jenkins.io/debian-stable binary/ &gt; /etc/apt/sources.list.d/jenkins.list'</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install jenkins</span><br></pre></td></tr></table></figure><p>使用了docker安装过jenkins，所以这里修改下端口号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/default/jenkins</span><br></pre></td></tr></table></figure><p>修改 <code>HTTP_PORT=8080</code> 为  <code>HTTP_PORT=8081</code> </p><h2 id="3-安装后设置-1"><a href="#3-安装后设置-1" class="headerlink" title="3. 安装后设置"></a>3. 安装后设置</h2><p>安装后配置jenkins和使用docker一样，打开浏览器输入你的网址加端口号（例如：<a href="http://127.0.0.1:8080），只是查看密码不用进入docker生成的容器内" target="_blank" rel="noopener">http://127.0.0.1:8080），只是查看密码不用进入docker生成的容器内</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看密码</span></span><br><span class="line">cat /var/lib/jenkins/secrets/initialAdminPassword</span><br><span class="line">8xxxxxxxxxxxxxxxxxxxxxxxx3</span><br></pre></td></tr></table></figure><h1 id="安装配置遇到的一些问题"><a href="#安装配置遇到的一些问题" class="headerlink" title="安装配置遇到的一些问题"></a>安装配置遇到的一些问题</h1><h2 id="1-第一次访问jenkins，页面空白"><a href="#1-第一次访问jenkins，页面空白" class="headerlink" title="1. 第一次访问jenkins，页面空白"></a>1. 第一次访问jenkins，页面空白</h2><ol><li>在网址后面加上”/pluginManager/advanced”（例如：<a href="http://127.0.0.1:8080/pluginManager/advanced）,如下图将https改成http，然后提交" target="_blank" rel="noopener">http://127.0.0.1:8080/pluginManager/advanced）,如下图将https改成http，然后提交</a></li></ol><!-- ![image.png](https://upload-images.jianshu.io/upload_images/2870014-c45c75b520e35179.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) --><img class="lozad" title="This is an example image" data-src="/2019/12/12/jenkins%E5%AE%89%E8%A3%85/blog-8.png"><ol start="2"><li>重启jenkins即可，重启jenkins直接在网址后边加上”/restart”(例如：<a href="http://127.0.0.1:8080/restart" target="_blank" rel="noopener">http://127.0.0.1:8080/restart</a>)</li></ol><h2 id="2-Jenkins时间与服务器系统时间不一致"><a href="#2-Jenkins时间与服务器系统时间不一致" class="headerlink" title="2. Jenkins时间与服务器系统时间不一致"></a>2. Jenkins时间与服务器系统时间不一致</h2><p>进入Jenkins→系统管理→脚本命令行，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.setProperty(<span class="string">'org.apache.commons.jelly.tags.fmt.timeZone'</span>, <span class="string">'Asia/Shanghai'</span>)</span><br></pre></td></tr></table></figure><p>【参考文章】</p><p><a href="https://jenkins.io/zh/doc/book/installing/" target="_blank" rel="noopener">https://jenkins.io/zh/doc/book/installing/</a></p><p><a href="https://blog.mhwang.club/jenkins搭建前端上线系统小试/" target="_blank" rel="noopener">https://blog.mhwang.club/jenkins搭建前端上线系统小试</a></p><p><a href="https://blog.csdn.net/qq_39680564/article/details/97640265" target="_blank" rel="noopener">https://blog.csdn.net/qq_39680564/article/details/97640265</a></p><p><a href="https://www.cnblogs.com/ninefish/p/9816612.html" target="_blank" rel="noopener">https://www.cnblogs.com/ninefish/p/9816612.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo搭建博客</title>
      <link href="/2019/11/06/blog/"/>
      <url>/2019/11/06/blog/</url>
      
        <content type="html"><![CDATA[<h3 id="使用-Hexo-在-coding上搭建博客"><a href="#使用-Hexo-在-coding上搭建博客" class="headerlink" title="使用 Hexo 在 coding上搭建博客"></a>使用 Hexo 在 coding上搭建博客</h3><p>要使用Hexo搭建博客，一定先在电脑上安装 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">node</a> （建议使用 Node.js 10.0 及以上版本） 和 <a href="https://git-scm.com/" target="_blank" rel="noopener">git</a></p><h4 id="安装-Hexo-并生成目录文件"><a href="#安装-Hexo-并生成目录文件" class="headerlink" title="安装 Hexo 并生成目录文件"></a>安装 Hexo 并生成目录文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装hexo</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="comment"># 进入文件夹</span></span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br></pre></td></tr></table></figure><p>在生成的文件根目录中有一个名字为 _config.yml 的文件，下边会用到这个文件</p><!-- ![生成的文件](https://upload-images.jianshu.io/upload_images/2870014-32cc34f74d676cf4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) --><img class="lozad" title="This is an example image" data-src="/2019/11/06/blog/blog-1.png"><h4 id="在-coding-上边建立仓库"><a href="#在-coding-上边建立仓库" class="headerlink" title="在 coding 上边建立仓库"></a>在 coding 上边建立仓库</h4><ol><li>在 <a href="https://dev.tencent.com/" target="_blank" rel="noopener">coding</a> 上边建立仓库（如下图）</li></ol><!-- ![在 coding 上边建立仓库](https://upload-images.jianshu.io/upload_images/2870014-7a4edd54961e14cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) --><img class="lozad" title="This is an example image" data-src="/2019/11/06/blog/blog-2.png"><ol start="2"><li>将仓库克隆到本地</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 仓库地址</span><br></pre></td></tr></table></figure><ol start="3"><li>将刚才生成的文件复制到刚刚克隆的仓库里面（注意：生成的文件中隐藏文件夹 “.git” 不要复制）如下图</li></ol><!-- ![提示图](https://upload-images.jianshu.io/upload_images/2870014-144441a716b0f40b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) --><img class="lozad" title="This is an example image" data-src="/2019/11/06/blog/blog-3.png"><ol start="4"><li>提交仓库新加的内容</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"第一次提交"</span></span><br><span class="line">git push</span><br><span class="line">``` </span><br><span class="line"> </span><br><span class="line">5. 使用git生成一个新分支（目的是保存博客的源文件）</span><br><span class="line"></span><br><span class="line">``` bash</span><br><span class="line"><span class="comment"># 创建新分支</span></span><br><span class="line">git branch 分支名</span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git checkout 分支名</span><br><span class="line"><span class="comment"># 推送到远程分支</span></span><br><span class="line">git push origin 分支名</span><br></pre></td></tr></table></figure><p>比如我们起的分支名为 source， 查看分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="comment"># 显示</span></span><br><span class="line">  master</span><br><span class="line">* <span class="built_in">source</span></span><br></pre></td></tr></table></figure><p>之后本地的操作全部在source分支上边，不用再切换分支</p><h4 id="配置-Hexo-并生成网站"><a href="#配置-Hexo-并生成网站" class="headerlink" title="配置 Hexo 并生成网站"></a>配置 Hexo 并生成网站</h4><ol><li>配置 Hexo</li></ol><p>之前安装 Hexo，生成目录文件的时候，有一个名字为 _config.yml 的文件，里面全是 Hexo 的配置信息，可以自定义修改，这里我们只修改 有关 git 仓库的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://git.dev.tencent.com/xxx/xxx.git  #仓库地址</span><br><span class="line">  branch: master #分支名称。如果不指定，则默认值为 master</span><br><span class="line">  message: Site updated： &#123;&#123; now(&apos;YYYY-MM-DD HH:mm:ss&apos;) &#125;&#125; #自定义提交信息 (默认为 Site updated：&#123;&#123; now(&apos;YYYY-MM-DD HH:mm:ss&apos;) &#125;&#125;)</span><br></pre></td></tr></table></figure><p><a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">更多详细配置</a></p><p>写好配置信息之后，再输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment"># 发布</span></span><br><span class="line"><span class="comment">## windows</span></span><br><span class="line">hexo clean <span class="string">"&amp;"</span> hexo g <span class="string">"&amp;"</span> hexo d</span><br><span class="line"><span class="comment">## mac</span></span><br><span class="line">hexo clean &amp; hexo g &amp; hexo d</span><br></pre></td></tr></table></figure><p>等命令执行后会将生成的博客提交到仓库主分支上，并推送到远程分支</p><ol start="2"><li>部署生成网站</li></ol><p>打开 <a href="https://dev.tencent.com/" target="_blank" rel="noopener">coding</a> 网站下图位置，开启 Coding pages 服务</p><!-- ![开启 pages 服务](https://upload-images.jianshu.io/upload_images/2870014-4e1f57d37722c688.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) --><img class="lozad" title="This is an example image" data-src="/2019/11/06/blog/blog-4.png"><p>至此，博客算部署完成</p><p>如果有自己的域名，也可以在pages服务设置页面自定义域名，不使用 coding 的域名</p><!-- ![pages 服务设置](https://upload-images.jianshu.io/upload_images/2870014-908dd392ba1e5696.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) --><img class="lozad" title="This is an example image" data-src="/2019/11/06/blog/blog-5.png"><p>【参考文章】<br><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/10/25/hello-world/"/>
      <url>/2019/10/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用jenkins和Github自动部署静态网站</title>
      <link href="/2019/10/24/%E4%BD%BF%E7%94%A8jenkins%E5%92%8CGithub%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/"/>
      <url>/2019/10/24/%E4%BD%BF%E7%94%A8jenkins%E5%92%8CGithub%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>采用jenkins和git自动部署网站，这里使用的jenkins非docker安装的jenkins，git仓库采用GitHub，使用的服务器为阿里云ubuntu18.04 64位</p><h1 id="首先在-GitHub-上边建立一个仓库"><a href="#首先在-GitHub-上边建立一个仓库" class="headerlink" title="首先在 GitHub 上边建立一个仓库"></a>首先在 GitHub 上边建立一个仓库</h1><!-- ![在GitHub建一个仓库](https://upload-images.jianshu.io/upload_images/2870014-2f9e2fbe2b4ebc28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) --><img class="lozad" title="This is an example image" data-src="/2019/10/24/%E4%BD%BF%E7%94%A8jenkins%E5%92%8CGithub%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/blog-1.png"><h1 id="在jenkins上边新建一个任务"><a href="#在jenkins上边新建一个任务" class="headerlink" title="在jenkins上边新建一个任务"></a>在jenkins上边新建一个任务</h1><h3 id="1-新建任务，选择构建自由风格的项目"><a href="#1-新建任务，选择构建自由风格的项目" class="headerlink" title="1. 新建任务，选择构建自由风格的项目"></a>1. 新建任务，选择构建自由风格的项目</h3><!-- ![在jenkins上新建任务](https://upload-images.jianshu.io/upload_images/2870014-421a15f60f8a8b53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) --><img class="lozad" title="This is an example image" data-src="/2019/10/24/%E4%BD%BF%E7%94%A8jenkins%E5%92%8CGithub%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/blog-2.png"><!-- ![选择新建任务类型](https://upload-images.jianshu.io/upload_images/2870014-f714a6c076376494.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) --><img class="lozad" title="This is an example image" data-src="/2019/10/24/%E4%BD%BF%E7%94%A8jenkins%E5%92%8CGithub%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/blog-3.png"><h3 id="2-配置任务"><a href="#2-配置任务" class="headerlink" title="2. 配置任务"></a>2. 配置任务</h3><ol><li>源码管理，输入仓库地址，用户名和密码</li></ol><!-- ![源码管理](https://upload-images.jianshu.io/upload_images/2870014-ebef957a55f44187.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) --><img class="lozad" title="This is an example image" data-src="/2019/10/24/%E4%BD%BF%E7%94%A8jenkins%E5%92%8CGithub%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/blog-4.png"><ol start="2"><li>选择构建触发器</li></ol><!-- ![选择构建触发器](https://upload-images.jianshu.io/upload_images/2870014-cbe3501504ecc0a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) --><img class="lozad" title="This is an example image" data-src="/2019/10/24/%E4%BD%BF%E7%94%A8jenkins%E5%92%8CGithub%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/blog-5.png"><ol start="3"><li>在jenkins全局配置中设置 GitHub Server，并查找 webhook（建议新开一个窗口设置）</li></ol><!-- ![查看webhook](https://upload-images.jianshu.io/upload_images/2870014-36b4ffb967f8bfaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) --><img class="lozad" title="This is an example image" data-src="/2019/10/24/%E4%BD%BF%E7%94%A8jenkins%E5%92%8CGithub%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/blog-6.png"><ol start="4"><li>在GitHub上边设置webhook</li></ol><!-- ![在GitHub上边设置webhook](https://upload-images.jianshu.io/upload_images/2870014-ecb89cd8c2f0f1bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) --><img class="lozad" title="This is an example image" data-src="/2019/10/24/%E4%BD%BF%E7%94%A8jenkins%E5%92%8CGithub%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/blog-7.png"><ol start="5"><li>书写构建中执行的操作，写完后点击保存</li></ol><!-- ![构建中执行的操作](https://upload-images.jianshu.io/upload_images/2870014-366db212a842332c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) --><img class="lozad" title="This is an example image" data-src="/2019/10/24/%E4%BD%BF%E7%94%A8jenkins%E5%92%8CGithub%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/blog-8.png"><h3 id="3-推送代码构建"><a href="#3-推送代码构建" class="headerlink" title="3. 推送代码构建"></a>3. 推送代码构建</h3><ol><li>使用git提交代码，并推送到GitHub上边，看到jenkins自动构建（如下图）</li></ol><!-- ![推送代码到GitHub,查看构建](https://upload-images.jianshu.io/upload_images/2870014-7ad92df76534289a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) --><img class="lozad" title="This is an example image" data-src="/2019/10/24/%E4%BD%BF%E7%94%A8jenkins%E5%92%8CGithub%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/blog-9.png"><h1 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h1><h3 id="1-安装-nginx"><a href="#1-安装-nginx" class="headerlink" title="1. 安装 nginx"></a>1. 安装 nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 nginx</span></span><br><span class="line">apt install nginx</span><br><span class="line"><span class="comment"># 启动 nginx 服务</span></span><br><span class="line">service nginx start</span><br></pre></td></tr></table></figure><h3 id="2-配置-nginx"><a href="#2-配置-nginx" class="headerlink" title="2. 配置 nginx"></a>2. 配置 nginx</h3><ol><li>进入 nginx 配置文件夹</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/nginx/conf.d</span><br></pre></td></tr></table></figure><ol start="2"><li>生成 test.conf 文件并编辑</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成 test.conf 文件</span></span><br><span class="line">vim test.conf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 编辑文件为以下内容</span><br><span class="line">server &#123;</span><br><span class="line">    #服务启动时监听的端口</span><br><span class="line">    listen 8010;</span><br><span class="line">    #服务启动时文件加载的路径（因为没有将jenkins从GitHub上pull下来的代码移到别的地方，这里加载的文件路径为jenkins工作目录）</span><br><span class="line">    root /var/lib/jenkins/workspace/test/;</span><br><span class="line">    #默认加载的第一个文件</span><br><span class="line">    index index.php index.html index.htm index.nginx-debian.html;</span><br><span class="line">    #页面访问域名，如果没有域名也可以填写_</span><br><span class="line">    server_name localhost;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新重新加载下 nginx 配置文件</span></span><br><span class="line">service nginx reload</span><br></pre></td></tr></table></figure><p>至此整个配置已经结束，可以访问网址加上8010端口便可查看部署的静态网站。</p><p>【参考文章】</p><p><a href="https://www.jianshu.com/p/9db976b675b2" target="_blank" rel="noopener">https://www.jianshu.com/p/9db976b675b2</a></p><p><a href="https://blog.mhwang.club/jenkins搭建前端上线系统小试/" target="_blank" rel="noopener">https://blog.mhwang.club/jenkins搭建前端上线系统小试</a></p><p><a href="https://www.arayzou.com/2016/09/20/前端工程师应该知道的nginx/" target="_blank" rel="noopener">https://www.arayzou.com/2016/09/20/前端工程师应该知道的nginx</a></p>]]></content>
      
      
      <categories>
          
          <category> 测试分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins，自动部署 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
